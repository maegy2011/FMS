// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  ACCOUNTANT
  VIEWER
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REVERSED
}

enum Currency {
  SAR
  USD
  EUR
  AED
  KWD
  QAR
  BHD
  OMR
}

enum RevenueSourceType {
  SALES
  SERVICES
  INVESTMENTS
  RENTAL
  COMMISSIONS
  ROYALTIES
  INTEREST
  OTHER
}

enum PartyType {
  CUSTOMER
  SUPPLIER
  PARTNER
  INVESTOR
  EMPLOYEE
  GOVERNMENT
  BANK
  OTHER
}

enum PartyStatus {
  ACTIVE
  INACTIVE
  PENDING
  BLOCKED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(VIEWER)
  avatar    String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[]
  approvals    TransactionApproval[]
  revenues     Revenue[]
  
  @@map("users")
}

model Account {
  id          String      @id @default(cuid())
  name        String
  code        String      @unique
  type        AccountType
  description String?
  balance     Float       @default(0)
  currency    Currency    @default(SAR)
  active      Boolean     @default(true)
  parentId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  parent      Account?           @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    Account[]          @relation("AccountHierarchy")
  transactions Transaction[]
  revenueSources RevenueSource[]
  revenues    Revenue[]
  parties     Party[]
  
  @@map("accounts")
}

model Transaction {
  id          String           @id @default(cuid())
  reference   String           @unique
  type        TransactionType
  amount      Float
  currency    Currency         @default(SAR)
  description String?
  date        DateTime
  status      TransactionStatus @default(PENDING)
  accountId   String
  userId      String
  categoryId  String?
  partyId     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  account     Account          @relation(fields: [accountId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  category    Category?        @relation(fields: [categoryId], references: [id])
  party       Party?           @relation(fields: [partyId], references: [id])
  approvals   TransactionApproval[]
  attachments TransactionAttachment[]
  
  @@map("transactions")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      Category?          @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]         @relation("CategoryHierarchy")
  transactions Transaction[]
  revenueSources RevenueSource[] @relation("RevenueSourceCategory")
  revenues    Revenue[]          @relation("RevenueCategory")
  
  @@map("categories")
}

model TransactionApproval {
  id           String   @id @default(cuid())
  status       String   @default("PENDING")
  comments     String?
  approvedAt   DateTime?
  transactionId String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  transaction  Transaction @relation(fields: [transactionId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  
  @@map("transaction_approvals")
}

model TransactionAttachment {
  id           String   @id @default(cuid())
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  transactionId String
  createdAt    DateTime @default(now())

  // Relations
  transaction  Transaction @relation(fields: [transactionId], references: [id])
  
  @@map("transaction_attachments")
}

model FinancialReport {
  id          String   @id @default(cuid())
  title       String
  type        String
  period      String
  data        String   // JSON data
  generatedAt DateTime @default(now())
  
  @@map("financial_reports")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_configs")
}

model RevenueSource {
  id          String            @id @default(cuid())
  name        String
  description String?
  type        RevenueSourceType
  category    String?
  isRecurring Boolean           @default(false)
  frequency   String?           // daily, weekly, monthly, quarterly, yearly
  amount      Float?
  currency    Currency          @default(SAR)
  startDate   DateTime?
  endDate     DateTime?
  active      Boolean           @default(true)
  accountId   String?
  categoryId  String?
  partyId     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  account     Account?           @relation(fields: [accountId], references: [id])
  categoryRel Category?          @relation("RevenueSourceCategory", fields: [categoryId], references: [id])
  party       Party?             @relation(fields: [partyId], references: [id])
  revenues    Revenue[]
  
  @@map("revenue_sources")
}

model Revenue {
  id            String    @id @default(cuid())
  reference     String    @unique
  sourceId      String
  amount        Float
  currency      Currency  @default(SAR)
  description   String?
  date          DateTime
  status        String    @default("PENDING") // PENDING, RECEIVED, OVERDUE, CANCELLED
  dueDate       DateTime?
  receivedDate  DateTime?
  accountId     String
  categoryId    String?
  partyId       String?
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  source        RevenueSource @relation(fields: [sourceId], references: [id])
  account       Account        @relation(fields: [accountId], references: [id])
  categoryRel   Category?      @relation("RevenueCategory", fields: [categoryId], references: [id])
  party         Party?         @relation(fields: [partyId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  
  @@map("revenues")
}

model Party {
  id            String      @id @default(cuid())
  name          String
  type          PartyType
  code          String      @unique
  description   String?
  email         String?
  phone         String?
  mobile        String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  website       String?
  taxId         String?
  commercialId  String?
  status        PartyStatus @default(ACTIVE)
  creditLimit   Float?
  balance       Float       @default(0)
  currency      Currency    @default(SAR)
  accountId     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  account       Account?         @relation(fields: [accountId], references: [id])
  revenues      Revenue[]
  revenueSources RevenueSource[]
  transactions  Transaction[]
  
  @@map("parties")
}